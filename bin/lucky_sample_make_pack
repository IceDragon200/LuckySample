#!/usr/bin/env ruby
# Used to generate LuckySample .zip files
require 'yaml'
require 'zip'
require 'optparse'

REVISION_VERSION = '1.3.0'
SAMPLE_MAP = ENV['LS_SAMPLE_MAP'] || File.expand_path('sample_map.yml', Dir.home)

abort "#{SAMPLE_MAP} does not exist" unless File.exist?(SAMPLE_MAP)

samples = YAML.load_file(SAMPLE_MAP)

options = {}
optparse = OptionParser.new do |o|
  o.banner = "USAGE: #{__FILE__} [-s SEED] [-f FILE]"

  o.on '-s', '--seed SEED', 'Set selector seed' do |v|
    options[:seed] = v.to_i
  end

  o.on '-f', '--file FILENAME', 'Set output filename' do |v|
    options[:filename] = v.to_s
  end
end

optparse.parse(ARGV.dup)

seed = options[:seed] || Time.now.to_i
zipname = options[:filename] || "lucky_samples-s#{seed}.zip"
random = Random.new(seed)

sampled = []

ary_sample = lambda do |array|
  array[random.rand(array.size)]
end

should_include_sample = lambda do |filename|
  if filename
    base = !sampled.include?(filename) && File.exist?(filename)

    # prevent sampling more than 1 wavetable
    if filename.include?("#Wavetables")
      base &&= sampled.all? do |f|
        !f.include?("#Wavetables")
      end
    end
    base
  else
    false
  end
end

selection = 10.times.map do
  s = nil
  while !should_include_sample.(s)
    STDERR.puts "Skipping #{s}" if s
    s = ary_sample.(samples)
  end
  sampled << s
  s
end

def path_cleanup(filename)
  result = filename.dup
  [
    "/home/icy/samples/",
    "/home/icy/.wine/drive_c/Program Files (x86)/Native Instruments/",
    "/home/icy/.wine/drive_c/Samples/Native Instruments/",
    "/home/icy/.wine/drive_c/users/Public/Application Data/Camel Audio/",
    "/home/icy/.wine/drive_c/users/Public/Application Data/MeldaProduction/",
    "/home/icy/.wine/drive_c/"
  ].each do |str|
    result.gsub!(str, "")
  end
  result
end

def to_windows_path(filename)
  filename.gsub("/", "\\")
end

def top_dir(filename)
  filename.split("/").first
end

sample_map = selection.map do |filename|
  {
    original_filepath: filename,
    extname: File.extname(filename),
    basename: File.basename(filename),
    basename_wo_ext: File.basename(filename, File.extname(filename)),
    unmangle_name: path_cleanup(filename),
    unmangle_dirname: File.dirname(path_cleanup(filename)),
    win_unmangle_name: to_windows_path(path_cleanup(filename)),
    win_unmangle_dirname: to_windows_path(File.dirname(path_cleanup(filename))),
    uname: begin
      n = filename.gsub("/", "-").gsub(" ", "_").downcase
      ext = File.extname(n)
      File.basename(n, ext).gsub(/[-_\(\)\[\]\{\}\.,'"><#&]/, "").split("") \
                           .shuffle.join("")[0, 16] + ext
    end
  }
end

Zip::File.open(zipname, Zip::File::CREATE) do |zipfile|
  sample_map.each do |hash|
    zipfile.add(hash[:uname], hash[:original_filepath])
  end

  # _mangle.bat
  zipfile.get_output_stream("_mangle.bat") do |io|
doc = <<__EOF__
@echo off
echo Mangling files
#{sample_map.map do |h|
    %Q(rename "#{h[:win_unmangle_name]}" "#{h[:uname]}")
  end.sort.join("\n")}

#{sample_map.map do |h|
  to_windows_path(top_dir(h[:unmangle_dirname]))
end.uniq.map do |n|
  %Q(rmdir "#{n}")
end.sort.join("\n")}
__EOF__
    io.write(doc)
  end

  # _unmangle.bat
  zipfile.get_output_stream("_unmangle.bat") do |io|
doc = <<__EOF__
@echo off
echo Un-Mangling files
#{sample_map.map do |h|
    %Q(mkdir "#{h[:win_unmangle_dirname]}"\n) +
    %Q(rename "#{h[:uname]}" "#{h[:win_unmangle_name]}")
  end.sort.join("\n")}
__EOF__
    io.write(doc)
  end

  # _mangle.sh
  zipfile.get_output_stream("_mangle.sh") do |io|
doc = <<__EOF__
#!/usr/bin/env bash
echo Mangling files
#{sample_map.map do |h|
    %Q(mv -vf "#{h[:unmangle_name]}" "#{h[:uname]}")
  end.sort.join("\n")}

#{sample_map.map do |h|
  top_dir(h[:unmangle_dirname])
end.uniq.map do |n|
  %Q(rm -vrf "#{n}")
end.sort.join("\n")}
__EOF__
    io.write(doc)
  end

  # _unmangle.sh
  zipfile.get_output_stream("_unmangle.sh") do |io|
doc = <<__EOF__
#!/usr/bin/env bash
echo Un-Mangling files
#{sample_map.map do |h|
    %Q(mkdir -vp "#{h[:unmangle_dirname]}"\n) +
    %Q(mv -vf "#{h[:uname]}" "#{h[:unmangle_name]}")
  end.sort.join("\n")}
__EOF__
    io.write(doc)
  end

  # _README.txt
  zipfile.add("_README.txt", File.expand_path("../README.txt", File.dirname(__FILE__)))

  # _revision.txt
  zipfile.get_output_stream("_revision.txt") { |io| io.write(REVISION_VERSION) }

  # _origin.yml
  zipfile.get_output_stream("_origin.yml") { |io| io.write(sample_map.to_yaml) }

  # _origin_for_humans.txt
  zipfile.get_output_stream("_origin_for_humans.txt") do |io|
    io.write(sample_map.map do |hash|
      "#{hash[:uname]} :: #{hash[:unmangle_name]}"
    end.sort.join("\n"))
  end

  # _timestamp.txt
  zipfile.get_output_stream("_timestamp.txt") do |io|
    io.write(Time.now.to_s)
  end
end

STDOUT.puts zipname
